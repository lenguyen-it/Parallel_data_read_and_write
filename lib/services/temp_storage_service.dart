import 'dart:convert';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'package:flutter/foundation.dart';

class TempStorageService {
  static final TempStorageService _instance = TempStorageService._internal();
  factory TempStorageService() => _instance;
  TempStorageService._internal();

  static const String _fileName = 'rfid_temp_data.json';
  File? _tempFile;

  bool _isWriting = false;
  final List<Map<String, dynamic>> _writeQueue = [];

  /// Kh·ªüi t·∫°o file t·∫°m (n·∫øu ch∆∞a c√≥)
  Future<void> _initTempFile() async {
    if (_tempFile != null) return;

    Directory tempDir = await getTemporaryDirectory();
    _tempFile = File(path.join(tempDir.path, _fileName));

    if (await _tempFile!.exists()) {
      // Ki·ªÉm tra file c√≥ h·ª£p l·ªá kh√¥ng
      if (!await _validateJsonFile()) {
        debugPrint('‚ö†Ô∏è File t·∫°m b·ªã l·ªói, t·∫°o m·ªõi...');
        await _tempFile!.delete();
      }
    }

    if (!await _tempFile!.exists()) {
      await _tempFile!.create(recursive: true);
      await _tempFile!.writeAsString('[]');
      debugPrint('‚úÖ ƒê√£ t·∫°o file t·∫°m m·ªõi: ${_tempFile!.path}');
    } else {
      debugPrint('‚ÑπÔ∏è File t·∫°m ƒë√£ t·ªìn t·∫°i: ${_tempFile!.path}');
    }
  }

  /// Ki·ªÉm tra file JSON c√≥ h·ª£p l·ªá kh√¥ng
  Future<bool> _validateJsonFile() async {
    try {
      final content = await _tempFile!.readAsString();
      if (content.isEmpty) return true;
      jsonDecode(content);
      return true;
    } catch (e) {
      debugPrint('‚ùå File JSON kh√¥ng h·ª£p l·ªá: $e');
      return false;
    }
  }

  /// TH√äM d·ªØ li·ªáu qu√©t ƒë∆∞·ª£c v√†o file t·∫°m (cho m·ªôt item)
  Future<void> appendScanData(Map<String, dynamic> tagData) async {
    await _initTempFile();

    // Th√™m timestamp n·∫øu ch∆∞a c√≥
    if (!tagData.containsKey('timestamp')) {
      tagData['timestamp_savefile'] = DateTime.now().toIso8601String();
    }
    if (!tagData.containsKey('sync_timestamp')) {
      tagData['sync_timestamp'] = null;
    }
    if (!tagData.containsKey('sync_duration_ms')) {
      tagData['sync_duration_ms'] = null;
    }

    // Th√™m v√†o queue
    _writeQueue.add(tagData);

    // N·∫øu ƒëang ghi, ƒë·ª£i xong
    if (_isWriting) {
      return;
    }

    // X·ª≠ l√Ω queue
    await _processWriteQueue();
  }

  /// Th√™m batch d·ªØ li·ªáu v√†o file t·∫°m (cho nhi·ªÅu items)
  Future<void> appendBatch(List<Map<String, dynamic>> batchData) async {
    await _initTempFile();

    // Th√™m timestamp cho t·ª´ng item
    for (var tagData in batchData) {
      if (!tagData.containsKey('timestamp')) {
        tagData['timestamp_savefile'] = DateTime.now().toIso8601String();
      }
      if (!tagData.containsKey('sync_timestamp')) {
        tagData['sync_timestamp'] = null;
      }
      if (!tagData.containsKey('sync_duration_ms')) {
        tagData['sync_duration_ms'] = null;
      }
    }

    // Th√™m all v√†o queue
    _writeQueue.addAll(batchData);

    // N·∫øu ƒëang ghi, ƒë·ª£i; else process
    if (_isWriting) {
      return;
    }

    await _processWriteQueue();
  }

  /// X·ª≠ l√Ω queue ghi file (batch write)
  Future<void> _processWriteQueue() async {
    if (_isWriting || _writeQueue.isEmpty) return;

    _isWriting = true;

    try {
      // L·∫•y t·∫•t c·∫£ items trong queue
      final batch = List<Map<String, dynamic>>.from(_writeQueue);
      _writeQueue.clear();

      // ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i
      List<dynamic> currentData = [];
      final content = await _tempFile!.readAsString();

      if (content.isNotEmpty && content != '[]') {
        try {
          currentData = jsonDecode(content);
        } catch (e) {
          debugPrint('‚ö†Ô∏è L·ªói ƒë·ªçc file, backup v√† t·∫°o m·ªõi: $e');
          // Backup file l·ªói
          final backupPath = '${_tempFile!.path}.backup';
          await _tempFile!.copy(backupPath);
          currentData = [];
        }
      }

      // Th√™m batch m·ªõi
      currentData.addAll(batch);

      // Ghi l·∫°i file (atomic write)
      final jsonStr = jsonEncode(currentData);
      await _tempFile!.writeAsString(jsonStr, flush: true);

      debugPrint(
          '‚úÖ ƒê√£ l∆∞u ${batch.length} items v√†o file t·∫°m | T·ªïng: ${currentData.length}');
    } catch (e) {
      debugPrint('‚ùå L·ªói processWriteQueue: $e');
      // ƒê∆∞a l·∫°i v√†o queue ƒë·ªÉ th·ª≠ l·∫°i
      _writeQueue.insertAll(0, _writeQueue);
    } finally {
      _isWriting = false;

      // N·∫øu c√≤n items trong queue, x·ª≠ l√Ω ti·∫øp
      if (_writeQueue.isNotEmpty) {
        await _processWriteQueue();
      }
    }
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i sync (v·ªõi lock)
  Future<void> updateSyncStatus({
    String? epcAscii,
    required String idLocal,
    required String syncStatus,
    double? syncDurationMs,
    String? syncError,
  }) async {
    await _initTempFile();

    // ƒê·ª£i n·∫øu ƒëang ghi
    while (_isWriting) {
      await Future.delayed(const Duration(milliseconds: 10));
    }

    _isWriting = true;

    try {
      final content = await _tempFile!.readAsString();
      if (content.isEmpty) return;

      List<dynamic> currentData;
      try {
        currentData = jsonDecode(content);
      } catch (e) {
        debugPrint('‚ö†Ô∏è L·ªói ƒë·ªçc file khi update sync: $e');
        return;
      }

      // T√¨m v√† c·∫≠p nh·∫≠t record
      bool updated = false;
      for (var item in currentData) {
        if (item['id_local'] == idLocal) {
          if (item['sync_status'] == 'synced' && syncStatus == 'failed') {
            continue;
          }

          item['sync_status'] = syncStatus;

          if (syncStatus == 'synced') {
            item['sync_timestamp'] = DateTime.now().toIso8601String();
            if (syncDurationMs != null) {
              item['sync_duration_ms'] = syncDurationMs;
            }
          } else if (syncStatus == 'failed') {
            item['sync_error'] = syncError ?? 'Unknown error';
          }

          updated = true;
          break;
        }
      }

      if (updated) {
        await _tempFile!.writeAsString(jsonEncode(currentData), flush: true);
        // debugPrint('‚úÖ C·∫≠p nh·∫≠t sync_status: $idLocal -> $syncStatus');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói updateSyncStatus: $e');
    } finally {
      _isWriting = false;
    }
  }

  /// XEM l·∫°i d·ªØ li·ªáu trong file t·∫°m
  Future<List<dynamic>> readAllTempData() async {
    await _initTempFile();

    // ƒê·ª£i n·∫øu ƒëang ghi
    while (_isWriting) {
      await Future.delayed(const Duration(milliseconds: 10));
    }

    try {
      final content = await _tempFile!.readAsString();
      if (content.isEmpty || content == '[]') {
        debugPrint('üìã File t·∫°m r·ªóng');
        return [];
      }

      final List<dynamic> jsonData = jsonDecode(content);
      debugPrint('üìã ƒê·ªçc file t·∫°m: ${jsonData.length} records');
      return jsonData;
    } catch (e) {
      debugPrint('‚ùå L·ªói readAllTempData: $e');

      // Th·ª≠ kh√¥i ph·ª•c t·ª´ backup
      final backupPath = '${_tempFile!.path}.backup';
      final backupFile = File(backupPath);

      if (await backupFile.exists()) {
        try {
          final backupContent = await backupFile.readAsString();
          final backupData = jsonDecode(backupContent);
          debugPrint('‚úÖ Kh√¥i ph·ª•c t·ª´ backup: ${backupData.length} records');

          // Ghi l·∫°i file ch√≠nh t·ª´ backup
          await _tempFile!.writeAsString(backupContent, flush: true);
          return backupData;
        } catch (e2) {
          debugPrint('‚ùå Kh√¥ng th·ªÉ kh√¥i ph·ª•c t·ª´ backup: $e2');
        }
      }

      return [];
    }
  }

  /// T·∫¢I file t·∫°m v·ªÅ m√°y (Downloads/Documents)
  Future<String?> downloadTempFile() async {
    await _initTempFile();

    // ƒê·ª£i n·∫øu ƒëang ghi
    while (_isWriting) {
      await Future.delayed(const Duration(milliseconds: 10));
    }

    try {
      Directory? targetDir;

      if (Platform.isAndroid) {
        targetDir = Directory('/storage/emulated/0/Download');
        if (!await targetDir.exists()) {
          targetDir = await getExternalStorageDirectory();
        }
      } else if (Platform.isIOS) {
        targetDir = await getApplicationDocumentsDirectory();
      } else {
        targetDir = await getDownloadsDirectory();
      }

      if (targetDir == null) {
        debugPrint('‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c l∆∞u file');
        return null;
      }

      final timestamp =
          DateTime.now().toIso8601String().replaceAll(':', '-').split('.')[0];
      final fileName = 'rfid_backup_$timestamp.json';
      final targetPath = path.join(targetDir.path, fileName);

      final targetFile = await _tempFile!.copy(targetPath);

      debugPrint('‚úÖ ƒê√£ t·∫£i file v·ªÅ: ${targetFile.path}');
      return targetFile.path;
    } catch (e) {
      debugPrint('‚ùå L·ªói downloadTempFile: $e');
      return null;
    }
  }

  /// ƒê·∫øm s·ªë l∆∞·ª£ng d·ªØ li·ªáu trong file
  Future<int> getTempDataCount() async {
    final data = await readAllTempData();
    return data.length;
  }

  /// X√ìA to√†n b·ªô file t·∫°m
  Future<void> clearTempFile() async {
    // ƒê·ª£i n·∫øu ƒëang ghi
    while (_isWriting) {
      await Future.delayed(const Duration(milliseconds: 10));
    }

    await _initTempFile();

    _writeQueue.clear();

    await _tempFile!.writeAsString('[]', flush: true);
    debugPrint('‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu file t·∫°m');
  }

  /// L·∫•y ƒë∆∞·ªùng d·∫´n file t·∫°m
  Future<String> getTempFilePath() async {
    await _initTempFile();
    return _tempFile!.path;
  }

  /// Force flush queue (g·ªçi khi c·∫ßn ƒë·∫£m b·∫£o t·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c ghi)
  Future<void> flushQueue() async {
    while (_writeQueue.isNotEmpty || _isWriting) {
      await _processWriteQueue();
      await Future.delayed(const Duration(milliseconds: 10));
    }
  }
}
