import 'dart:async';
import 'package:flutter/material.dart';
import 'package:paralled_data/database/history_database.dart';
import 'package:paralled_data/services/rfid_scan_service.dart';

class RfidScanPage extends StatefulWidget {
  const RfidScanPage({super.key});

  @override
  State<RfidScanPage> createState() => _RfidScanPageState();
}

class _RfidScanPageState extends State<RfidScanPage> {
  final RfidScanService _scanService = RfidScanService();
  List<Map<String, dynamic>> _localData = [];
  StreamSubscription<Map<String, dynamic>>? _subscription;
  StreamSubscription<Map<String, dynamic>>? _syncSubscription;
  StreamSubscription<Map<String, dynamic>>? _uiUpdateSubscription;
  Timer? _autoRefreshTimer;
  bool _isLoading = false;

  // ignore: unused_field
  Map<String, dynamic>? _lastTagData;

  // L∆∞u timestamp c·ªßa c√°c l·∫ßn qu√©t trong 1 gi√¢y
  final List<DateTime> _scanTimestamps = [];

  // L∆∞u timestamp c·ªßa c√°c l·∫ßn ƒë·ªìng b·ªô trong 1 gi√¢y
  final List<DateTime> _syncTimestamps = [];

  int get _scansInLastSecond {
    final now = DateTime.now();
    final oneSecondAgo = now.subtract(const Duration(seconds: 1));
    _scanTimestamps.removeWhere((t) => t.isBefore(oneSecondAgo));
    return _scanTimestamps.length;
  }

  int get _syncsInLastSecond {
    final now = DateTime.now();
    final oneSecondAgo = now.subtract(const Duration(seconds: 1));
    _syncTimestamps.removeWhere((t) => t.isBefore(oneSecondAgo));
    return _syncTimestamps.length;
  }

  @override
  void initState() {
    super.initState();
    _initSetup();
  }

  Future<void> _initSetup() async {
    await _scanService.connect();
    _scanService.attachTagStream();
    await _loadLocal();

    _subscription = _scanService.tagStream.listen((data) {
      setState(() {
        _lastTagData = data;
        _scanTimestamps.add(DateTime.now());
      });
    });

    _uiUpdateSubscription = _scanService.uiUpdateStream.listen((data) async {
      await _loadLocal();
    });

    _syncSubscription = _scanService.syncStream.listen((data) {
      setState(() {
        _syncTimestamps.add(DateTime.now());
      });
      _loadLocal();
    });

    _autoRefreshTimer = Timer.periodic(const Duration(seconds: 2), (_) async {
      await _loadLocal();
      if (mounted) setState(() {});
    });
  }

  Future<void> _loadLocal() async {
    final data = await HistoryDatabase.instance.getAllScans();
    if (mounted) {
      setState(() => _localData = data);
    }
  }

  @override
  void dispose() {
    _subscription?.cancel();
    _syncSubscription?.cancel();
    _uiUpdateSubscription?.cancel();
    _autoRefreshTimer?.cancel();
    _scanService.dispose();
    super.dispose();
  }

  Future<void> _handleSingleScan() async {
    setState(() => _isLoading = true);
    try {
      await _scanService.startSingleScan();
    } catch (e) {
      debugPrint('Single scan error: $e');
    } finally {
      await _loadLocal();
      setState(() => _isLoading = false);
    }
  }

  Future<void> _handleContinuousScan() async {
    try {
      await _scanService.startContinuousScan();
    } catch (e) {
      debugPrint('Continuous scan error: $e');
    }
  }

  Future<void> _handleStopScan() async {
    await _scanService.stopScan();
  }

  /// üîπ Danh s√°ch d·ªØ li·ªáu ƒë√£ qu√©t
  Widget _buildScannedList() {
    if (_localData.isEmpty) {
      return const Center(child: Text('Ch∆∞a c√≥ d·ªØ li·ªáu'));
    }

    final statusMap = {
      'pending': 'ƒêang ch·ªù',
      'synced': 'Th√†nh c√¥ng',
      'failed': 'Th·∫•t b·∫°i',
    };

    return ListView.builder(
      itemCount: _localData.length,
      itemBuilder: (context, i) {
        final item = _localData[i];
        final code = item['barcode'] ?? '---';
        final status = item['status'] ?? 'pending';
        final statusText = statusMap[status] ?? status;
        final scanDuration = item['scan_duration_ms'];

        Color bgColor;
        switch (status) {
          case 'synced':
            bgColor = const Color(0xFFE8F5E9); // xanh l√° nh·∫°t
            break;
          case 'failed':
            bgColor = const Color(0xFFFFEBEE); // ƒë·ªè nh·∫°t
            break;
          default:
            bgColor = const Color(0xFFFFF8E1); // cam nh·∫°t
        }

        return Container(
          height: 80,
          color: bgColor,
          decoration: const BoxDecoration(
            border: Border(bottom: BorderSide(color: Colors.black12)),
          ),
          child: ListTile(
            title: Text(
              code,
              style: const TextStyle(fontSize: 13),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Tr·∫°ng th√°i: $statusText',
                  style: TextStyle(
                    fontSize: 12,
                    color: status == 'synced'
                        ? Colors.green
                        : (status == 'failed' ? Colors.red : Colors.orange),
                  ),
                ),
                //if (scanDuration != null)
                if (scanDuration != null && status == 'synced')
                  Text(
                    'T·ªëc ƒë·ªô qu√©t: ${scanDuration.toStringAsFixed(2)}ms/m√£',
                    style: const TextStyle(fontSize: 11, color: Colors.blue),
                  ),
              ],
            ),
          ),
        );
      },
    );
  }

  /// üîπ Danh s√°ch d·ªØ li·ªáu ƒë·ªìng b·ªô
  Widget _buildSyncedList() {
    if (_localData.isEmpty) {
      return const Center(child: Text('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªìng b·ªô'));
    }

    final statusMap = {
      'pending': 'ƒêang ch·ªù',
      'synced': 'Th√†nh c√¥ng',
      'failed': 'Th·∫•t b·∫°i',
    };

    return ListView.builder(
      itemCount: _localData.length,
      itemBuilder: (context, i) {
        final item = _localData[i];
        final code = item['barcode'] ?? '---';
        final status = item['status'] ?? 'pending';
        final statusText = statusMap[status] ?? status;
        final syncDuration = item['sync_duration_ms'];

        Color bgColor;
        switch (status) {
          case 'synced':
            bgColor = const Color(0xFFE8F5E9); // xanh l√° nh·∫°t
            break;
          case 'failed':
            bgColor = const Color(0xFFFFEBEE); // ƒë·ªè nh·∫°t
            break;
          default:
            bgColor = const Color(0xFFFFF8E1); // cam nh·∫°t
        }

        return Container(
          height: 80,
          color: bgColor,
          child: ListTile(
            title: Text(
              code,
              style: const TextStyle(fontSize: 13),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Tr·∫°ng th√°i: $statusText',
                  style: TextStyle(
                    fontSize: 13,
                    color: status == 'synced'
                        ? Colors.green
                        : (status == 'failed' ? Colors.red : Colors.orange),
                  ),
                ),
                if (syncDuration != null && status == 'synced')
                  Text(
                    'T·ªëc ƒë·ªô ƒë·ªìng b·ªô: ${syncDuration.toStringAsFixed(2)}ms/m√£',
                    style: const TextStyle(fontSize: 11, color: Colors.green),
                  ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ƒê·ªìng b·ªô d·ªØ li·ªáu RFID'),
        backgroundColor: Colors.blue.shade700,
      ),
      body: Column(
        children: [
          // ----------- ƒêi·ªÅu khi·ªÉn -----------
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Wrap(
              spacing: 8,
              runSpacing: 8,
              alignment: WrapAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: _isLoading ? null : _handleSingleScan,
                  child: const Text('Qu√©t 1 l·∫ßn'),
                ),
                ElevatedButton(
                  onPressed: _handleContinuousScan,
                  child: const Text('Qu√©t li√™n t·ª•c'),
                ),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                  onPressed: _handleStopScan,
                  child: const Text('D·ª´ng'),
                ),
                ElevatedButton(
                  onPressed: _loadLocal,
                  child: const Text('T·∫£i l·∫°i'),
                ),
              ],
            ),
          ),

          const Divider(height: 1),

          // ----------- Hai c·ªôt d·ªØ li·ªáu -----------
          Expanded(
            child: Row(
              children: [
                // ===== C·ªòT B√äN TR√ÅI: D·ªÆ LI·ªÜU ƒê√É QU√âT =====
                Expanded(
                  child: Column(
                    children: [
                      Container(
                        height: 80,
                        color: Colors.blue.shade50,
                        alignment: Alignment.centerLeft,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 8.0, vertical: 6.0),
                        width: double.infinity,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            const Text(
                              'D·ªØ li·ªáu ƒë√£ qu√©t',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.blue,
                              ),
                            ),
                            Text(
                              '(${_localData.length})',
                              style: const TextStyle(
                                fontSize: 13,
                                color: Colors.blueGrey,
                              ),
                            ),
                            Text(
                              'T·ªëc ƒë·ªô: $_scansInLastSecond m√£/gi√¢y',
                              style: const TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                                color: Colors.blue,
                              ),
                            ),
                          ],
                        ),
                      ),
                      Expanded(child: _buildScannedList()),
                    ],
                  ),
                ),

                const VerticalDivider(width: 1),

                // ===== C·ªòT B√äN PH·∫¢I: D·ªÆ LI·ªÜU ƒê·ªíNG B·ªò =====
                Expanded(
                  child: Column(
                    children: [
                      Container(
                        height: 80,
                        color: Colors.green.shade50,
                        alignment: Alignment.centerLeft,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 8.0, vertical: 6.0),
                        width: double.infinity,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            const Text(
                              'D·ªØ li·ªáu ƒë·ªìng b·ªô',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                            Text(
                              '(${_localData.where((e) => e['status'] == 'synced').length}/${_localData.length})',
                              style: const TextStyle(
                                fontSize: 13,
                                color: Colors.green,
                              ),
                            ),
                            Text(
                              'T·ªëc ƒë·ªô: $_syncsInLastSecond m√£/gi√¢y',
                              style: const TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                          ],
                        ),
                      ),
                      Expanded(child: _buildSyncedList()),
                    ],
                  ),
                ),
              ],
            ),
          )
        ],
      ),
    );
  }
}
